@page "/inventories"
@inject NavigationManager NavigationManager
@inject IInventoryRepository InventoryRepository
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase


<h3>Inventory List</h3>
<br/>
<SearchInventoryComponent OnSearchInventory="OnInventorySearch">
</SearchInventoryComponent>
<br/>
<button type="button" class="btn btn-primary" @onclick="AddInventory"><i class="bi bi-plus-square" style="padding:0 0.5rem 0 0;"></i>Add Inventory</button>
<br/>
<InventoryListComponent ListInventories="@Items"></InventoryListComponent>
<PageComponent ChangeCurrentPage="OnCurrentPageChange" TotalPages="_totalPages"></PageComponent>


@code {

    private string SearchTerm { get; set; } = string.Empty;

    private List<Inventory> Items { get; set; } = new();
    
    private int _totalPages;

    protected override async Task OnInitializedAsync()
    {
        await OnCurrentPageChange(0);
        _totalPages = InventoryRepository.GetMaxPageCount();
    }

    private async void  OnInventorySearch(string searchTerm)
    {
        SearchTerm = searchTerm;
        var result = (await InventoryRepository.GetInventoryItemsAsync(searchTerm)).ToList();
        Items = InventoryRepository.GetPaginatedItems(result, 0).ToList();
        _totalPages = result.Count / InventoryRepository.ItemsPerPage;
        StateHasChanged();
        
    }

    private void AddInventory()
    {
        NavigationManager.NavigateTo("/addinventory");
    }

    private async Task OnCurrentPageChange(int currentPage)
    {
        var response = InventoryRepository.GetInventoryItemsAsync(SearchTerm, currentPage);
        await response;
        
        if (response.IsCompleted)
        {
            Items = response.Result.ToList();
            await InvokeAsync(StateHasChanged);
        }
    }



}