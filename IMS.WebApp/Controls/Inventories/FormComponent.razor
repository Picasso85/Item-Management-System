@inject NavigationManager NavigationManager
@inject IAddInventoryUseCase AddInventoryUseCase
@inject IJSRuntime js

<h3>Add Inventory</h3>
<br />
<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
    </div>
    <br />
    <div class="btn-group btn-group-sm" role="group" aria-label="Small button group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="Back">Back</button>
        <button type="reset" class="btn btn-warning">Reset</button>
    </div>
</EditForm>

@code {

    private Inventory inventory = new Inventory();

    protected async override Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            await js.InvokeVoidAsync("focusById", "name");
        }
    }

    private async Task SaveInventory()
    {
        await AddInventoryUseCase.ExecuteAsync(inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/inventories");
    }


}
