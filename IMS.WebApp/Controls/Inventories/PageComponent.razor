@inject IInventoryRepository InventoryRepository


<nav aria-label="...">
    <ul class="pagination gap-1 align-items-center">
        <li class="page-item disabled">
            <button class="btn btn-primary" disabled="@(!CanGoPrevious)" @onclick="GoToPreviousPage"><i class="bi bi-arrow-left-square paddingIconRight"></i>Previous</button>
        </li>
        @for (var i = 0; i < TotalPages; i++)
        {
            var index = i;

            <li class="page-item">
                <button class="btn btn-sm  @(CurrentPage == index ? "btn-primary" : "btn-outline-primary")" disabled="@(index == CurrentPage)" @onclick="() => GoToPage(index)">@(index + 1)</button>
            </li>
        }
        <li class="page-item">
            <button class="btn btn-primary" disabled="@(!CanGoNext)" @onclick="GoToNextPage">Next<i class="bi bi-arrow-right-square " style="padding:0 0 0 0.5rem;"></i></button>
        </li>
    </ul>
</nav>

@code {

    public int ItemsPerPage => InventoryRepository.ItemsPerPage;

    private int Index { get; set; }
    

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public EventCallback<int> ChangeCurrentPage { get; set; }

    private bool CanGoNext => CurrentPage < TotalPages - 1;

    private bool CanGoPrevious => CurrentPage > 0;

    private int CurrentPage { get; set; } = 0;

    private async Task GoToNextPage()
    {
        if (CurrentPage <= TotalPages - 1)
        {
            CurrentPage++;

            await ChangeCurrentPage.InvokeAsync(CurrentPage);
        }
    }

    private async Task GoToPreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;

            await ChangeCurrentPage.InvokeAsync(CurrentPage);

        }
    }

    private async Task GoToPage(int pageNumber)
    {
        CurrentPage = pageNumber;
        await ChangeCurrentPage.InvokeAsync(pageNumber);
    }

}
